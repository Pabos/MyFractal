#version 440 core
#define LSIZEX 16
struct Varray
{
	vec4 col[1024];
};
layout (local_size_x = LSIZEX, local_size_y = LSIZEX * 3 / 4, local_size_z = 1 ) in;
layout(std430, binding=0) buffer Positionbuffer	{Varray Position[];};
layout(std430, binding=3) buffer Colors			{Varray mcolors[];};
layout(std430, binding=4) buffer Fragments0		{Varray fragments[];};
layout(std430, binding=5) buffer Fragments1		{Varray fragcol[];};

layout(std430, binding=2) buffer Computebuffer	{ 

	vec3 camera;	float dmin;
	vec3 raycam;	float dmax;
	vec3 wx;		float steps;
	vec3 wy;		float accuracy;
	float maxiter;	float frames;	float dum1;	int step;	


	vec3 LightDir;	float occrange;		vec3 LightSource; float AmbientLight;
	vec3 col1;		float LightColor;	vec3 col2;		float LightSpecular;
	vec3 FogColor;	float EmissiveColor;vec3 vcamera;	float SpecularPower;
	float ccol_;	float type;			float sine;		float layer_;	
	float Alpha;	float FogStart;		float FogEnd;	float FogEnabled;
	float occwidth;	float depth;		 int b4;	int b5;
};

struct Model
{
	vec3 mcentre;
	bool hidden;
	vec3 rotcentre; 
	float mtype; //0 = cube 1 = sphere
	vec3 mdim ;
	float mbound;
	vec4 color;
	mat4 objrot; 
	vec4 orient;
	vec4 raycam;
	vec3 wx;	float dum0;
	vec3 wy;	float dum1;
	vec3 wz;	float dum2;
	vec4 lightdir;
	float EmissiveColor; float Specular; float Spower; float dum5;
};
layout(std430, binding=6) buffer Modelbuffer	{Model model[10];};

//-----------------------------------------------------------------------------
uint gx	=	gl_GlobalInvocationID.x;
uint gx1	=	gx + 2;
uint gy	=	gl_GlobalInvocationID.y;
uint gy1	=	gy + 2;
vec4 pts[9];
uint ind[9];
vec3	color;
//-----------------------------------------------------------------------------
// Structure definitions
//-----------------------------------------------------------------------------
struct ColorPair
{	vec3 Diffuse;
	vec3 Specular;};
//-----------------------------------------------------------------------------
// Compute per-pixel lighting.
ColorPair ComputePerPixelLights(vec3 E, vec3 N, vec4 p0)
{
	ColorPair result;
	vec3 L 				= normalize(LightDir);
	vec3 H 				= normalize(E + L);
	float dt 			= max(0,dot(N, L));
	result.Diffuse		= vec3(AmbientLight);
	result.Diffuse		+= vec3(LightColor) * dt * vec4(mcolors[gy].col[gx]).w;
	result.Diffuse		*= vec3(model[int(p0.w) - 1].EmissiveColor) + 1.0;    // ???? +1 ?????
	result.Specular		= vec3(0.0f);
	//if (dt != 0)
	  result.Specular	+= vec3(model[int(p0.w) - 1].Specular) * pow(max(0,dot(H,N)), model[int(p0.w) - 1].Spower);//  * max(vec4(mcolors[gy].col[gx]).w, 0.2);
	return result;
}
//-----------------------------------------------------------------------------
void main(){
// #define disp
#ifdef disp
	pts[0] = Position[gy].col[gx];

	if (pts[0].w  != 0.0f)
	{
		vec4	Matcolor = vec4(0,0,0,0);
		vec3	Normals = fragments[gy].col[gx].xyz;
		// #define smooth
		#ifdef smooth
		for (int i = -1; i <= 1; i++)			
			for (int y = -1; y < 1; y++)
				Matcolor += vec4(mcolors[gy+y].col[gx+i]);
		Matcolor = Matcolor / 9;
		#else
		Matcolor = normalize(vec4(mcolors[gy].col[gx]));
		#endif
		vec3 posToEye			= -vcamera + pts[0].xyz;
		ColorPair lightResult	= ComputePerPixelLights(normalize(posToEye), -Normals, pts[0]);
		color					= Matcolor.rgb * lightResult.Diffuse + lightResult.Specular;
		fragments[gy].col[gx]	= (vec4(steps * vec2(1.0f/512.0f * gx ,1.0f/384.0f * gy ) - vec2(1, 1), 0,1));
	}
	else 
	{
		color					= vec3(0.5f,0.5f,0.5f);
		fragments[gy].col[gx]	= vec4(steps * vec2(1.0f/512.0f, 1.0f/384.0f) * gl_GlobalInvocationID.xy - vec2(1, 1), 0.99f,1);
	}
		fragcol[gy].col[gx]		= vec4(color, 1);
#endif
}

