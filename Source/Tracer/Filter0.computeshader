#version 440 core
#define LSIZEX 32
#define LSIZEY 20
layout (local_size_x = LSIZEX, local_size_y = LSIZEY, local_size_z = 1 ) in;
struct Varray{ vec4 col[1024]; };
layout(std430, binding=1) buffer Filterbuffer	{Varray filterbuffer[];};
layout(std430, binding=3) buffer Filterbuffer1	{Varray filterbuffer1[];};
layout(std430, binding=4) buffer Colorbuffer	{Varray colorbuffer[];};
layout(std430, binding=11) buffer Shadowbuffer	{Varray shadowbuffer[];};
layout(std430, binding=2) buffer Computebuffer	{ 
	vec3 camera;		int objstart;
	float steps;		int objs;				int reflection;		int obj;
	vec3 wx;			float shadow;
	vec3 wy;			float shadow1;	
	vec3 LightDir;		float AmbientLight;
	vec3 LightSource;	float Alpha;
	float LightColor;	float LightSpecular;	float EmissiveColor;	float SpecularPower;
	vec3 dum0;			int filter0;
	float dt;			int iter;				int maxframes;			float timer;
	float dum1;			float dum2;				int glass;				int filter1;
	vec4 dum3;
	mat4 camrot;
};

uint gx	=	gl_GlobalInvocationID.x;
uint gy	=	gl_GlobalInvocationID.y;
int span = 3;
uint cgx	=	gx - span;
uint cgy	=	gy - span;
uint loopcount = 1 + 2 * span;
const float gWeights[7][7] ={
{0,		0,		0.001,	0.001,	0.001,	0,		0},
{0,		0.002,	0.012,	0.020,	0.012,	0.002,	0},
{0.001,	0.012,	0.068,	0.109,	0.068,	0.012,	0.001},
{0.001,	0.020,	0.109,	0.172,	0.109,	0.020,	0.001},
{0.001,	0.012,	0.068,	0.109,	0.068,	0.012,	0.001},
{0,		0.002,	0.012,	0.020,	0.012,	0.002,	0},
{0,		0,		0.001,	0.001,	0.001,	0,		0}
};	
const float bWeights[5][5] ={
{1,	4,	7,	4,	1},
{4,	16,	26,	16,	4},
{7,	26,	41,	26,	7},
{4,	16,	26,	16,	4},
{1,	4,	7,	4,	1},
};
void main()
{	
	
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
	vec3 colout = vec3(0,0,0);
	filterbuffer1[gy].col[gx] = colorbuffer[gy].col[gx];
	if(filter0 == 1)
	{
		float weight = 0;
		for( int i = 0; i < loopcount; i++)                                                                                                                                   
			for( int y = 0; y < loopcount; y++)                                                                                                                               
			{
				weight += gWeights[i][y];
				colout = colout + gWeights[i][y] * colorbuffer[cgy + y].col[cgx + i].xyz; 
			}
		filterbuffer1[gy].col[gx]    = vec4(colout/weight, 1);
	}
}