
#version 430 core
 
layout(local_size_x = 32, local_size_y = 39, local_size_z = 1 ) in;
layout(std430, binding=7) buffer Framebuffer	{ vec4	frame[]; };
layout(std430, binding=9) buffer Normalbuffer	{ vec4	normal[]; };
layout(std430, binding=3) buffer Computebuffer	{ 
	float	order;
	float	xpoints;
	float	cam;	
	int		f2;	
	float	maxd;
	float	mind;
	int		maxiter;
	float	dum1;
};

struct bailout
{	bool bail;
	float dedist;};

vec3 rot(vec3 v0, float lv0, vec3 vectc){
	float theta		= order * atan(v0.y , v0.x);
    float phi		= order * atan(v0.z , length(v0.xy));
	float cosphi	= cos(phi);
	float sinphi	= sin(phi);
	float costheta	= cos(theta);
	float sintheta	= sin(theta);
	return		(pow(lv0, order) * vec3(costheta*cosphi, sintheta*cosphi, -sinphi) + vectc);
	//return		(pow(lv0, order) * vec3(costheta*sinphi, sintheta*sinphi, -cosphi) + vectc);
};

bool inside_(vec3 z0)
{
	bailout ret;
	vec3 vc		= z0; 
	float r		= length(z0);
    int		iteration;
	for (iteration = 0; (r < 2.0f) && (iteration < maxiter); iteration +=1) 
		{	z0	= rot(z0, r, vc);
			r	= length(z0); }
	if (iteration >= maxiter) 
		ret.bail = true; 
	else
		ret.bail = false;
	return ret.bail;
}

float mindist = 0.001f;
bailout inside(vec3 z0)
{
	bailout ret;
    int	iteration;
	vec3 vc		= z0; 
	float dr	= 1.0;
	float r		= length(z0);
	for (iteration = 0; (iteration < maxiter); iteration +=1) 
		{	
			dr	= order * pow(r, order-1.0f) * dr + 1.0f;
			z0	= rot(z0, r, vc);
			r	= length(z0);
		}
	ret.dedist = 0.5f * (log(r)*r/dr);
	if (ret.dedist < 0.005f) ret.bail = true; else ret.bail = false;
	return ret; 
}

vec3 estimate_normal(vec3 z)
{
	float e = inside(z).dedist / 2000.0;
	vec3 z1 = z + vec3(e, 0, 0);
	vec3 z2 = z - vec3(e, 0, 0);
	vec3 z3 = z + vec3(0, 0.75f * e, 0);
	vec3 z4 = z - vec3(0, 0.75f * e, 0);
	vec3 z5 = z + vec3(0, 0, e);
	vec3 z6 = z - vec3(0, 0, e);

	float dx = inside(z1).dedist - inside(z2).dedist;
	float dy = inside(z3).dedist - inside(z4).dedist;
	float dz = inside(z5).dedist - inside(z6).dedist;

	return normalize(vec3(dx, dy, dz) );
}
void main()
{	
	float stepx		= 4.096f /xpoints;
	float stepy		= stepx;
	vec3 coord		= vec3(vec3(stepx * gl_GlobalInvocationID.x, stepy * gl_GlobalInvocationID.y, 0)) ;
	vec3 v0			= (coord  + vec3(-2.048f, -1.560f, 0) + vec3(0,0,cam));
	float l			= length(v0);
	
	if ((v0.x == 0) && (v0.y == 0)) return;
	if (!inside(v0).bail) return;

	for (int i = -1; i < 2; i++)	for (int j = -1; j < 2; j++)	for (int k = -1; k < 2; k++)
	{
		if (!inside(vec3(v0.x + stepx  * i, v0.y + stepx  * j, v0.z + stepx  * k)).bail) 
		{
			if (l > maxd) maxd = l;
			if (l < mind) mind = l;
			int temp		= atomicAdd(f2, 1);
			frame[temp]		= vec4(v0, 1);
			barrier();
			normal[temp]	= vec4(estimate_normal(v0), 1);
			return;
		}
	}
}